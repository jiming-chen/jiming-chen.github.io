<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jiming Chen</title>
    <link>https://jiming-chen.github.io/</link>
    <description>Recent content on Jiming Chen</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 27 Jan 2025 12:21:34 -0500</lastBuildDate>
    <atom:link href="https://jiming-chen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture 3: Permutation Groups and Abstract Groups</title>
      <link>https://jiming-chen.github.io/courses/math4340/lecture03/</link>
      <pubDate>Mon, 27 Jan 2025 12:21:34 -0500</pubDate>
      <guid>https://jiming-chen.github.io/courses/math4340/lecture03/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;factorial&lt;/strong&gt; is defined as $n! = 1 \cdot 2 \cdot 3 \cdots n$ for $n \geq 1$ though we may define $0!=1$.&lt;/p&gt;
&lt;p&gt;We also have binomials:&lt;/p&gt;
&lt;p&gt;$$\binom{n}{i} = \frac{n!}{i!(n-i)!}.$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fact&lt;/strong&gt;: If $p$ is prime, then $p$ divides $\binom{p}{i}$ unless $i=0$ or $i=p$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can also write out the binomial expansion:&lt;/p&gt;
&lt;p&gt;$$(a+b)^n = \sum_{i=0}^n \binom{n}{i} a^ib^{n-i}$$&lt;/p&gt;
&lt;p&gt;where $a,b$ are &amp;ldquo;numbers.&amp;rdquo; Importantly, the binomial coefficient is counting something, specifically the number of subsets of $1, \ldots, n$ with exactly $i$ elements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lecture 3: Electric Potential Energy and Electric Fields</title>
      <link>https://jiming-chen.github.io/courses/phys2217/lecture03/</link>
      <pubDate>Mon, 27 Jan 2025 10:11:49 -0500</pubDate>
      <guid>https://jiming-chen.github.io/courses/phys2217/lecture03/</guid>
      <description>&lt;h2 id=&#34;electric-potential-energy&#34;&gt;Electric Potential Energy&lt;/h2&gt;
&lt;p&gt;If you have a charges $q_1$ and $q_2$ infinitely far away, and you want to bring them together so that they are $r_{12}$ apart, work has to be done. Work is&lt;/p&gt;
&lt;p&gt;$$\int \mathbf{F} \cdot d\mathbf{s} = \int_{\infty}^{r_{12}} -\frac{1}{4\pi\epsilon_0} \frac{q_1q_2}{r_{12}^2}dr = \frac{1}{4\pi\epsilon_0} \frac{q_1q_2}{r_{12}}.$$&lt;/p&gt;
&lt;p&gt;Also, recall that work is path independent. Generalizing for multiple points, we have&lt;/p&gt;
&lt;p&gt;$$U = \frac{1}{2} \sum_{j=1}^N \sum_{j\neq k}^N \frac{1}{4\pi\epsilon_0} \frac{q_1q_k}{r_{jk}}.$$&lt;/p&gt;
&lt;p&gt;The $1/2$ is there because pairs of points are double-counted. The above statement is equivalent to Coulomb&amp;rsquo;s law.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lecture 2: Image Filtering</title>
      <link>https://jiming-chen.github.io/courses/cs4670/lecture02/</link>
      <pubDate>Fri, 24 Jan 2025 13:26:11 -0500</pubDate>
      <guid>https://jiming-chen.github.io/courses/cs4670/lecture02/</guid>
      <description>&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;
&lt;p&gt;How do you represent a photograph? You could say pixels, but originally, there were no pixels in photographs. Therefore, we could say an image is a function that maps spatial location to intensity, where intensity is a number between 0 and 1, inclusive:&lt;/p&gt;
&lt;p&gt;$$f : \mathbb{R}^2 \to [0, 1].$$&lt;/p&gt;
&lt;img src=&#34;https://jiming-chen.github.io/courses/cs4670/lecture02/train.jpg&#34; alt=&#34;Derailed train&#34; width=&#34;50%&#34; class=&#34;center&#34;&gt;
&lt;figcaption&gt;Fig. 1. An example of an image.&lt;/figcaption&gt;
&lt;p&gt;What about color images? We could extend the function definition to one using RGB:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lecture 2: Charge and Coulomb&#39;s Law</title>
      <link>https://jiming-chen.github.io/courses/phys2217/lecture02/</link>
      <pubDate>Fri, 24 Jan 2025 10:12:56 -0500</pubDate>
      <guid>https://jiming-chen.github.io/courses/phys2217/lecture02/</guid>
      <description>&lt;h2 id=&#34;vector-calculus-recap&#34;&gt;Vector Calculus Recap&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;field&lt;/strong&gt; is a physical quantity that is defined at each point in time and space. It could be a scalar, vector, or tensor. Temperatures are an example of a scalar field and wind an example of vector fields.&lt;/p&gt;
&lt;p&gt;Gradient (vector showing direction of steepest ascent), divergence (scalar), and curl (vector showing how much rotation) are vector field operations.&lt;/p&gt;
&lt;h2 id=&#34;charge&#34;&gt;Charge&lt;/h2&gt;
&lt;p&gt;Charge has some fundamental properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There are 2 types of charge.&lt;/li&gt;
&lt;li&gt;Charges are quantized.&lt;/li&gt;
&lt;li&gt;Charges are conserved.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;coulombs-law&#34;&gt;Coulomb&amp;rsquo;s Law&lt;/h2&gt;
&lt;p&gt;We can write Coulomb&amp;rsquo;s Law:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lecture 2: Assembly Language Overview and Intro to ARM ISA</title>
      <link>https://jiming-chen.github.io/courses/cs3420/lecture02/</link>
      <pubDate>Thu, 23 Jan 2025 13:23:22 -0500</pubDate>
      <guid>https://jiming-chen.github.io/courses/cs3420/lecture02/</guid>
      <description>&lt;h2 id=&#34;assembly-intro&#34;&gt;Assembly Intro&lt;/h2&gt;
&lt;p&gt;Assembly code is a slightly more readable version of machine code. Machine code is a list of binary instructions that are executed by the processor. In programming languages, keywords, braces, etc. make programs understandable by humans and easy to use. Compilers take that code and convert it into assembly code. Then, each line of assembly is converted in machine code.&lt;/p&gt;
&lt;img src=&#34;https://jiming-chen.github.io/courses/cs3420/lecture02/layers.png&#34; alt=&#34;Code translation&#34; width=&#34;80%&#34; class=&#34;center&#34;&gt;
&lt;figcaption&gt;Fig. 1. One line of C code often corresponds to three or four lines of assembly code. Assembly to machine is just decoding, which is a very thin layer of abstraction.&lt;/figcaption&gt;
&lt;p&gt;Why are keywords in assembly very short (two or three letters)? Back when programs were written on punched cards, there was a margin on the cards, and people wrote short descriptions for what the holes (binary representation) meant.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimal Theme Park Ride Order</title>
      <link>https://jiming-chen.github.io/projects/rides/</link>
      <pubDate>Tue, 14 Jan 2025 01:59:49 -0800</pubDate>
      <guid>https://jiming-chen.github.io/projects/rides/</guid>
      <description>&lt;p&gt;[WORK IN PROGRESS] If we assign happiness to certain rides and have information about how much time it takes to ride a string of rides in a certain order, how can we maximize happiness in one day at a theme park? There is a lot of information we can work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each ride has an associated happiness.&lt;/li&gt;
&lt;li&gt;Each ride has a wait time.&lt;/li&gt;
&lt;li&gt;Total time must not exceed the time the park is open.&lt;/li&gt;
&lt;li&gt;Walking between any two rides takes a certain amount of time.&lt;/li&gt;
&lt;li&gt;Throughout the day, wait times and walk times (crowd levels) change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we only incorporate happiness and distance between rides (even accounting changes during the day), we can use a simple maximum flow reduction with &lt;a href=&#34;https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Ford-Fulkerson&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OCaml Transformer</title>
      <link>https://jiming-chen.github.io/projects/transformer/</link>
      <pubDate>Thu, 02 Jan 2025 00:19:49 -0800</pubDate>
      <guid>https://jiming-chen.github.io/projects/transformer/</guid>
      <description>&lt;p&gt;This (&lt;a href=&#34;https://github.coecis.cornell.edu/hmk68/3110-final-project&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Cornell GitHub&lt;/a&gt;) was our final project for CS 3110: Data Structures and Functional Programming. We implemented a simple transformer in OCaml and trained it on successful posts on SideChat, a social media app popular at Cornell and other schools. I worked with Haadi Khan, Domenic Fioravanti, and Will Bradley.&lt;/p&gt;

    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/qpr12wxoHbg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;figcaption&gt;Fig. 1. YouTube demo of our post generator made by Haadi.&lt;/figcaption&gt;
&lt;h2 id=&#34;probabilistic-model&#34;&gt;Probabilistic Model&lt;/h2&gt;
&lt;p&gt;Before creating the transformer, we first created a probabilistic model.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sports Betting Devigger</title>
      <link>https://jiming-chen.github.io/projects/devigger/</link>
      <pubDate>Tue, 17 Dec 2024 22:59:49 -0800</pubDate>
      <guid>https://jiming-chen.github.io/projects/devigger/</guid>
      <description>&lt;p&gt;This tool (&lt;a href=&#34;https://github.com/jjc256/devigger&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;) looks at de-vigorished sports betting odds for bets offered by Pinnacle, a sharp bookmaker, and uses those to find positive EV betting opportunities on FanDuel, a soft bookmaker. Tools like this are not unique, but they are offered as a service for &lt;a href=&#34;https://oddsjam.com/subscribe&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;high fees&lt;/a&gt;, so I decided to make a simple version myself.&lt;/p&gt;
&lt;p&gt;Rather than search for arbitrage opportunities, it looks for statistical arbitrage-esque market inefficiencies since sports betting &amp;ldquo;markets&amp;rdquo; are somewhat inefficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://jiming-chen.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jiming-chen.github.io/about/</guid>
      <description>&lt;p&gt;I study Computer Science at Cornell University.&lt;/p&gt;
&lt;p&gt;Last summer, I researched using LLMs for hardware design under &lt;a href=&#34;https://www.csl.cornell.edu/~zhiruz/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Zhiru Zhang&lt;/a&gt; funded by an Engineering Learning Initiatives grant. See our report &lt;a href=&#34;https://jiming-chen.github.io/about/Chen_Shao_Report.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am working on formal verification of RTL designs for a custom chip as part of &lt;a href=&#34;https://c2s2.engineering.cornell.edu/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Cornell Custom Silicon Systems&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;some-relevant-coursework&#34;&gt;Some relevant coursework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Analysis of Algorithms&lt;/li&gt;
&lt;li&gt;Graduate Probability Theory I&lt;/li&gt;
&lt;li&gt;Honors Algebra&lt;/li&gt;
&lt;li&gt;Functional Programming in OCaml&lt;/li&gt;
&lt;li&gt;Embedded Systems&lt;/li&gt;
&lt;li&gt;Computer Vision&lt;/li&gt;
&lt;li&gt;Digital Logic and Computer Organization&lt;/li&gt;
&lt;li&gt;Discrete Structures&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;honors&#34;&gt;Honors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;William Lowell Putnam Mathematical Competition (Top 800)&lt;/li&gt;
&lt;li&gt;ICCAD Contest on LLM-Assisted Hardware Design (9th Place)&lt;/li&gt;
&lt;li&gt;Cornell Integration Bee (3rd Place)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;miscellanous&#34;&gt;Miscellanous&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I enjoy playing the &lt;a href=&#34;https://jiming-chen.github.io/piano&#34;&gt;piano&lt;/a&gt;, which I currently study under &lt;a href=&#34;https://music.cornell.edu/andrew-zhou&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Andrew Zhou&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I am currently reading Homer&amp;rsquo;s &lt;em&gt;Iliad&lt;/em&gt;. See my Goodreads &lt;a href=&#34;https://www.goodreads.com/user/show/186102361-jiming-chen&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I am interested in philosophy and was previously an editor for &lt;em&gt;Logos: The Cornell Undergraduate Philosophy Journal&lt;/em&gt;. See the 2024 edition &lt;a href=&#34;https://jiming-chen.github.io/about/Logos-Journal-Volume-XX-Spring-2024.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Or see whether I think numbers are real &lt;a href=&#34;https://jiming-chen.github.io/about/PHIL3780.pdf&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I write problems for the &lt;a href=&#34;https://bigredmathcomp.org/&#34; rel=&#34;noopener&#34; target=&#34;_blank&#34;&gt;Cornell University Big Red Math Competition&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reach out at &lt;code&gt;jc3579@cornell.edu&lt;/code&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Piano Pieces</title>
      <link>https://jiming-chen.github.io/piano/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jiming-chen.github.io/piano/</guid>
      <description>A list of piano pieces which I have played or am currently playing.</description>
    </item>
    <item>
      <title>Splitter</title>
      <link>https://jiming-chen.github.io/splitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jiming-chen.github.io/splitter/</guid>
      <description>&lt;h1&gt;Instagram Image Splitter&lt;/h1&gt;
  &lt;input type=&#34;file&#34; id=&#34;imageInput&#34; accept=&#34;image/*&#34;&gt;
  &lt;div id=&#34;canvas-container&#34;&gt;&lt;/div&gt;
  &lt;button id=&#34;saveAllBtn&#34; style=&#34;display: none; margin: 20px 0;&#34;&gt;Save All Images&lt;/button&gt;

  &lt;script&gt;
      document.getElementById(&#39;imageInput&#39;).addEventListener(&#39;change&#39;, function(event) {
          const file = event.target.files[0];
          if (file) {
              const img = new Image();
              img.onload = function() {
                  processImage(img);
              };
              img.src = URL.createObjectURL(file);
          }
      });

      function processImage(img) {
          const canvasContainer = document.getElementById(&#39;canvas-container&#39;);
          canvasContainer.innerHTML = &#39;&#39;;
          const originalWidth = img.width;
          const originalHeight = img.height;
          const squareSize = Math.min(originalWidth, originalHeight / Math.ceil(originalHeight / originalWidth));
          
          let y = 0;
          let partNumber = 1;
          
          const images = [];
          while (y + squareSize &lt;= originalHeight) {
              const canvas = document.createElement(&#39;canvas&#39;);
              canvas.width = squareSize;
              canvas.height = squareSize;
              const ctx = canvas.getContext(&#39;2d&#39;);
              ctx.drawImage(img, 0, y, squareSize, squareSize, 0, 0, squareSize, squareSize);
              
              const link = document.createElement(&#39;a&#39;);
              link.href = canvas.toDataURL(&#34;image/png&#34;);
              link.download = `split_part_${partNumber}.png`;
              link.innerHTML = `&lt;br&gt;Download Part ${partNumber}`;
              
              canvasContainer.appendChild(canvas);
              canvasContainer.appendChild(link);
              images.push({ url: link.href, filename: link.download });
              
              y += squareSize;
              partNumber++;
          }

          // Show and setup save all button
          const saveAllBtn = document.getElementById(&#39;saveAllBtn&#39;);
          saveAllBtn.style.display = &#39;block&#39;;
          saveAllBtn.onclick = () =&gt; {
              images.forEach(img =&gt; {
                  const link = document.createElement(&#39;a&#39;);
                  link.href = img.url;
                  link.download = img.filename;
                  link.click();
              });
          };
      }
  &lt;/script&gt;</description>
    </item>
    <item>
      <title>Winter Break Countdown</title>
      <link>https://jiming-chen.github.io/countdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jiming-chen.github.io/countdown/</guid>
      <description>&lt;style&gt;
.strawberry-container {
  display: grid;
  gap: 2px;
  justify-content: center;
  margin: 1rem 5rem;
}
&lt;/style&gt;
&lt;div id=&#34;countdown&#34; style=&#34;font-size: 32px;&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;completion&#34; style=&#34;font-size: 32px;&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;strawberry-grid&#34; class=&#34;strawberry-container&#34;&gt;&lt;/div&gt;
&lt;figcaption&gt;Each strawberry represents one hour. Fully realized strawberries represent hours that have passed.&lt;/figcaption&gt;
&lt;script&gt;
// Set the date we&#39;re counting down to
const countDownDate = new Date(&#34;Jan 20, 2025 16:45:00 EST&#34;).getTime();
const startDate = new Date(&#34;Dec 21, 2024 15:00:00 EST&#34;).getTime();
const totalDuration = countDownDate - startDate;

// Function to update percentage
const updatePercentage = () =&gt; {
  const now = new Date().getTime();
  const elapsed = now - startDate;
  const percentComplete = Math.min(100, Math.max(0, (elapsed / totalDuration) * 100));
  document.getElementById(&#34;completion&#34;).innerHTML = &#34;and is &#34; + 
    percentComplete.toFixed(5) + &#34;% over.&#34;;
};

// Function to update countdown
const updateCountdown = () =&gt; {
  const now = new Date().getTime();
  const distance = countDownDate - now;
  
  // Time calculations
  const days = Math.floor(distance / (1000 * 60 * 60 * 24));
  const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((distance % (1000 * 60)) / 1000);

  if (distance &lt; 0) {
    clearInterval(countdownInterval);
    clearInterval(percentInterval);
    document.getElementById(&#34;countdown&#34;).innerHTML = &#34;Winter break is over.&#34;;
    document.getElementById(&#34;completion&#34;).innerHTML = &#34;&#34;;
  } else {
    document.getElementById(&#34;countdown&#34;).innerHTML = &#34;Winter break ends in &#34; + days + &#34;d &#34; + hours + &#34;h &#34;
    + minutes + &#34;m &#34; + seconds + &#34;s&#34;;
  }
};

const totalHours = Math.floor(totalDuration / (3600000));

function updateGridLayout() {
  const container = document.getElementById(&#39;strawberry-grid&#39;);
  const strawberrySize = 12; // 10px image + 2px gap
  const maxWidth = Math.min(window.innerWidth - 40, 1200); // 20px padding on each side
  const columns = Math.floor(maxWidth / strawberrySize);
  container.style.gridTemplateColumns = `repeat(${columns}, 10px)`;
}

function updateStrawberryGrid() {
  const now = new Date().getTime();
  const hoursPassed = Math.floor((now - startDate) / 3600000);
  let html = &#34;&#34;;
  
  for (let i = 0; i &lt; totalHours; i++) {
    if (i &lt; hoursPassed) {
      html += `&lt;img src=&#34;https://jiming-chen.github.io/countdown/strawberry.svg&#34; width=&#34;10&#34; style=&#34;opacity:1;&#34; /&gt;`;
    } else {
      html += `&lt;img src=&#34;https://jiming-chen.github.io/countdown/strawberry.svg&#34; width=&#34;10&#34; style=&#34;opacity:0.3;&#34; /&gt;`;
    }
  }
  document.getElementById(&#34;strawberry-grid&#34;).innerHTML = html;
}

// Add resize listener
window.addEventListener(&#39;resize&#39;, updateGridLayout);

// Initialize values immediately
updatePercentage();
updateCountdown();
updateGridLayout();
updateStrawberryGrid();

// Set up intervals for updates
const percentInterval = setInterval(updatePercentage, 100);
const countdownInterval = setInterval(updateCountdown, 1000);
const gridInterval = setInterval(updateStrawberryGrid, 60000);
&lt;/script&gt;</description>
    </item>
  </channel>
</rss>
